---
title: Computational Journalism at Stanford University
layout: /layouts/pages/homepage/homepage-layout
has_header: false
page_class: home
---

<% content_card 'Agenda' do %>

# Final Project

### [Final requirements and deadlines](/assignments/projects/final-project/requirements)





##### Last week, May 18, More Congressional data

Data and some lessons here: [congress-data-taster](https://github.com/datademofun/congress-data-taster)

Here's something you should be able to do with the APIs: Find the least partisan congressmembers by voting record.



##### May 16: Congressional data

- Readme: [https://github.com/datademofun/fec-catalog](https://github.com/datademofun/fec-catalog)
- Lesson: [Exploring FEC Expenditures](https://github.com/datademofun/fec-catalog/blob/master/LESSON_EXPLORE_FEC_EXPENDITURES.md)

In class, consider how money spent is a proxy for competitive races.

Explore [the FEC Expenditures with Python](https://github.com/datademofun/fec-catalog/blob/master/LESSON_EXPLORE_FEC_EXPENDITURES.md) and answer these questions:

- How much independent expenditure money was spent on Trump vs opposing Trump? How about Clinton?
- Which candidates had the most oppo money spent against them?
- How much money was spent on Facebook advertising in 2014 vs 2010?


Then, apply the same process to candidate disbursement data. Pay particular attention to how different the fields are for independent expenditures.


For Wednesday: We'll build an app in class. Sign up for the following APIs:


- [ProPublica Represent](https://propublica.github.io/congress-api-docs/)
- [Sunlight Foundation Congress](https://sunlightlabs.github.io/congress/)
- [FEC API](https://api.open.fec.gov/developers/)
- [GovTrack (no signup needed)](https://www.govtrack.us/developers/api)

### Homework

And __before__ class (i.e. Tuesday night), __email me__ with 10 interesting mashups of Congress data.











## Last week, May 9

Homework: (due next Monday and Wednesday) - <%=link_cro '/assignments/projects/flask-filter-app' %>


### Topic: The work of ranking and filtering data


Compare how the different organizations rank and filter data, and the pros and minuses:

#### College ranking sites

[College Score Card](https://collegescorecard.ed.gov/)

- [Deconstructing and reconstructing the College Scorecard](http://www.brookings.edu/research/papers/2015/10/15-deconstructing-reconstructing-college-scorecard-whitehurst-chingos)
- [Obama's New College Scorecard Flips the Focus of Rankings](http://www.theatlantic.com/education/archive/2015/09/obamas-new-college-scorecard-flips-the-focus-of-rankings/405379/)


[US News Best Colleges](http://colleges.usnews.rankingsandreviews.com/best-colleges)

- [The problem with the U.S. News college rankings](https://www.washingtonpost.com/blogs/answer-sheet/post/the-problem-with-the-us-news-college-rankings/2011/09/13/gIQAY5zPQK_blog.html)
- [Our Annual Reminder to Ignore the U.S. News & World Report College Rankings](http://www.theatlantic.com/education/archive/2013/09/your-annual-reminder-to-ignore-the-em-us-news-world-report-em-college-rankings/279103/)


--------------



## Last time, May 9

## Deploying a web application on Heroku

### Lessons

- Start [out by creating a Heroku account, installing the Heroku toolbelt, and deploying the most basic of Heroku Flask applications](https://github.com/datademofun/heroku-basic-flask).
- Then, try creating a Flask app that uses USGS earthquake data. You can [start from this model repo](https://github.com/datademofun/heroku-flask-quakes-simple). Get it deployed onto Heroku, and make it polished looking, [like this polished version](https://github.com/datademofun/heroku-flask-quakes-lesssimple).


### Homework due Wednesday, May 11



#### Readings

- [The Design and Structure of a News Application](https://github.com/propublica/guides/blob/master/design-structure.md)
- [How to Build a News App, Part 1](http://datajournalismhandbook.org/1.0/en/delivering_data_1.html)
- [News Apps at ProPublica](http://datajournalismhandbook.org/1.0/en/delivering_data_2.html)

#### Deploy your own Flask news app

Send me two deliverables:

- a URL to your live app on Heroku
- Create a __new Github repo__ (do not put it in cj-2016) named __myfirstnewsapp__ that contains the code to your Flask app.


Build a Flask app similar to the news app described in [NICAR's First News App tutorial](http://first-news-app.readthedocs.io/en/latest/). Deploy it to Heroku.

Warning: the [First News App tutorial](http://first-news-app.readthedocs.io/en/latest/) contains a number of unnecessary steps that you don't need to follow. It also does not contain any of the steps needed to get on to Heroku.

- You should be able to skip most of the installation instructions.
- Skip the instructions involving __virtualenv__ and/or __git__ -- we don't need the former, and you already know how to do the latter from the other tutorials.
- Skip [Act 5: Hello Internet](http://first-news-app.readthedocs.io/en/latest/), because it describes an alternate way of deploying to the Internet.


You don't have to use the LA Riots data, but I want you to be able to create an app that has at least these components:

- A homepage route/view that lists all of the data records and a "broad view" of those records. [Here's the homepage from the First News App example](http://ireapps.github.io/first-news-app/build/index.html).
- A route/view for _each record_ that shows more detail of the individual record. Here's an [detailed record view from the First News App example](http://ireapps.github.io/first-news-app/build/2/).


Note: while we haven't covered JavaScript explicitly, you should be able to create an [interactive JavaScript map by following the tutorial and making adjustments as needed](http://first-news-app.readthedocs.io/en/latest/#act-4-hello-javascript).


FWIW, <a href="https://blooming-wave-56993.herokuapp.com/">here's my hot take on the First News App</a>. The main change is that I use the Google Street View API to display a picture of the incident address.


#### A note about including external files

When you get to the [Hello, JavaScript section of the First News App tutorial](http://first-news-app.readthedocs.io/en/latest/#act-4-hello-javascript), it will have some example HTML for including the external JavaScript and style files for its Leaflet interactive maps:

~~~html
  <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
  <script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
~~~

__Don't copy that code__ -- it will be non-functional on a Heroku site, because Heroku uses `https` and browsers, such as Chrome, will not allow the importing of files from `http` (non-secure) URLs.

Instead, include this HTML snippet -- it will import the same Leaflet code, but will actually work on Heroku:


~~~html
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/leaflet.css" />
   <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/leaflet.js"></script>
~~~





<hr>




  <h3>Last week, May 4</h3>
  <h4>Continuing with the wrangling and visualization with pandas and matplotlib</h4>

Relevant repos:

- [tweepy-congress-collector](https://github.com/datademofun/tweepy-congress-collector) - a repo containing code to fetch data from the Twitter API and use pandas to join and analyze the data. Also contains all the actual data fetched (300MB)
- [python-notebooks-data-wrangling](https://github.com/dannguyen/python-notebooks-data-wrangling) - this dataset contains several notebooks and several hundreds of MB of data. You can follow the lessons on how to fetch the data yourself, or clone the repo and access the data locally. Some lessons:
  - [Practice with subplots using earthquake data and pandas](https://github.com/dannguyen/python-notebooks-data-wrangling/blob/master/Visualization--Multiples-with-Standard-Subplots.ipynb)
  - [Partial lesson using financial data](https://github.com/dannguyen/python-notebooks-data-wrangling/blob/master/Visualization--Multiples-Variety.ipynb)


  <h3>Last week, May 2</h3>
  <h4>Visualization with matplotlib; data wrangling with pandas</h4>
  <p>
    Clone the repo here: <%=url_alone 'https://github.com/datademofun/matplotlibsampler'%> and work your way through the lessons.
  </p>

  <h3>Homework (due May 4): "3-charts"</h3>
  <p>In your <strong>cj-2016</strong> repo, create a folder named <strong>3-charts</strong></p>
  <p>It should contain three charts:</p>

- A line chart comparing the stock performance of various tech companies (see the <strong>data/stocks</strong> directory in the [matplotlibsampler repo](https://github.com/datademofun/matplotlibsampler)
- A scatterplot showing the relationship between two independent variables. Check out the data/schools or data/congress directory. Easiest example is: are high SAT reading scores related to high SAT math scores? (duh) You don't have to join two different datasets.
- A stacked bar chart with categorical variables (any of the data files will work, but data/congress might be easiest). An example: Number of twitter followers by congressional party and gender

<p>Your <strong>cj-2016/3-charts</strong> folder should contained saved images of the charts (i.e. .png files) and the code to generate those files.</p>



<% content_card do %>

<h4>Readings</h4>

<p>Also, please read:</p>

- [Tidy Data](http://vita.had.co.nz/papers/tidy-data.pdf) - This will seem like an overly dense file...but _not_ reading it will make the next lesson on data-wrangling (which includes the concepts of pivoting and "melting") data somewhat difficult for you.
- [Word clouds considered harmful](http://www.niemanlab.org/2011/10/word-clouds-considered-harmful/)
- [Introduction to Data Visualization: Visualization Types](http://guides.library.duke.edu/datavis/vis_types)
- [Design Principles for News Apps & Graphics](https://www.propublica.org/nerds/item/design-principles-for-news-apps-graphics)


<% end %>



  <hr>


  <h2>Last Week, April 27</h2>

  <p>Pre-built Flask apps to fork, clone, and improve</p>

  <ul>
    <li><a href="https://github.com/datademofun/spotify-flask">Spotify browser</a></li>
    <li><a href="https://github.com/datademofun/congress-flask">Congress Legislator data</a></li>
    <li><a href="https://github.com/datademofun/deathpenalty-tracker">Death Penalty tracker</a>...actually, you probably won't find this one much fun.</li>
  </ul>


  <p>
  Worth reading on your own:

<a href="http://gawker.com/what-i-learned-about-the-washington-post-from-four-year-1772856986">What I Learned About the Washington Post From Four Years Collecting Data on Police Violence</a>
  </p>

<ul>
  <li><a href="https://github.com/washingtonpost/data-police-shootings">WaPo's Github repo for the data</a></li>
  <li><a href="http://fatalencounters.org/">Fatal Encounters</a></li>
  <li><a href="http://www.theguardian.com/us-news/ng-interactive/2015/jun/01/about-the-counted">The Guardian's The Counted also provides data.</a></li>

</ul>


  <h2>Monday, April 25</h2>



  <h2>Wednesday, April 20: Texas Web Scraping</h2>




  <h2>Previous class</h2>


  <h3>Monday, April 18: guest speaker</h3>
  <p>
<a href="http://qz.com/author/davidyanofskyquartz/">David Yanofsky of Quartz</a> will talk about his entrepreneurial work in data visualization and investigations.
  </p>


  <p>
    <strong>Homework due April 20:</strong> <%= link_cro '/assignments/week-03/web-and-text-scrapes' %>
  </p>



  <p>Going to pivot to web scraping and HTML parsing. First lesson is here:</p>

  <p><%=link_cro "/warmups/govt-text-releases/collect-lists-of-obama-press-briefings"%> </p>

  <p>In class exercise on building a Flask app</p>

  <p>Finish these series of exercises, make sure you can produce a simple Flask app:</p>

  <p><%= link_cro "/lessons/flask-single-page/" %></p>

  <p>We'll tentatively start on this series of Flask app building</p>



  <p><%= link_cro "/lessons/flask-simple-news-app/" %></p>


  <h2>Last Week</h2>

  <li><a href="/lessons/lectures/2016-04-04--spreadsheets-and-documents/">April 4 Lecture and Homework</a></li>

  <li><a href="/lessons/lectures/dollars-for-docs-prehistory">Dollars for Docs prehistory</a></li>

  <h3>Two Weeks Ago</h3>

  <p><a href="/lessons/static/where-is-nypd-stop-and-frisks">Practice examining NYPD Stop and Frisk Data using interactive Python.</a></p>

<% end %>


<section class="sec">
  <h2>COMM 177A/277A</h2>

<blockquote>
  Focuses on using data and algorithms to lower the cost of discovering stories or telling stories in more engaging and personalized ways. Project based assignments based on real-world challenges faced in newsrooms. Prior experience in journalism or computational thinking helpful. Prerequisite: Comm 273D, COMM 113/213, or the consent of instructor.

</blockquote>


  <section class="sec">
    <h4>Instructor</h4>

    <p>Dan Nguyen, dun@stanford.edu</p>

    <h4>Meeting times</h4>
    <ul class="list-unstyled">
      <li> <a href="http://campus-map.stanford.edu/?id=120-410">Building 120, Room 410</a></li>
      <li>Monday and Wednesdays, 9:30AM to 11:20AM</li>
    </ul>


    <h5>Office hours</h5>
    <ul class="list-unstyled">
      <li>Mondays and Wednesdays, 1PM to 3 PM, or by appointment</li>
      <li>McClatchy Hall 342</li>
    </ul>

    <h3>Objectives</h3>
    <ul>
      <li>To count what interests us.</li>
      <li>To count it efficiently.</li>
      <li>To communicate new insights to the public. <a href="http://first-news-app.readthedocs.org/en/latest/">Most likely via building web application</a>.</li>
      <li>"To do what's right and to do it now"</li>
    </ul>

    <h5>Grading</h5>
    <ul>
      <li>Attendance: 10%</li>
      <li><a href="/challenges">Homework</a>: 50%</li>
      <li>Projects: 40%</li>

    </ul>

    <ul>
      <li>There is no final.</li>
      <li>Please let me know several days in advance if you cannot make class.</li>
      <li>There is a final project that will consist of a public-facing web application. Here's a <a href="http://classwork.compjour.org/2015/jeffbarrera/bikecrashmapper/">nice example from a student last year</a>.</li>
      <li>There will be 2 smaller projects, some of which will be worked on in-class and in groups.</li>
      <li>There will be readings/case studies every week.</li>
      <li>There will be <a href="/challenges">challenges every week</a>.</li>
    </ul>
  </section>

  <section>
      <h2>Books and Resources</h2>
      <p>There are no required books, but I'll likely make frequent references to:</p>

      <ul>
        <li><a href="http://datajournalismhandbook.org/">The Data Journalism Handbook</a></li>
        <li><a href="http://www.unc.edu/~pmeyer/book/">The New Precision Journalism</a></li>
        <li><a href="http://towcenter.org/research/the-art-and-science-of-data-driven-journalism/">The Art and Science of Data Driven Journalism</a></li>
        <li><a href="https://source.opennews.org/en-US/">Source OpenNews</a></li>
        <li><a href="https://www.propublica.org/nerds">The ProPublica Nerd Blog</a></li>
      </ul>

      <p>We'll be using Python 3.5 and Github. You should be using a text editor for writing your programs: either <a href="https://www.sublimetext.com/3">Sublime Text 3</a> (<strong>3</strong>, not 2) or <a href="https://atom.io/">Atom</a> will do.</p>
  </section>


</section>




  <section class="syllabus">

  <%= partial '/layouts/pages/homepage/home-partials/syllabus' %>

  </section>
